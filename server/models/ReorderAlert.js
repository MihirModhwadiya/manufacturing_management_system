import mongoose from 'mongoose';

const reorderAlertSchema = new mongoose.Schema({
  inventoryItem: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'InventoryItem',
    required: true
  },
  supplier: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Supplier',
    required: true
  },
  currentStock: {
    type: Number,
    required: true,
    min: 0
  },
  reorderPoint: {
    type: Number,
    required: true,
    min: 0
  },
  suggestedQuantity: {
    type: Number,
    required: true,
    min: 1
  },
  priority: {
    type: String,
    enum: ['high', 'medium', 'low'],
    default: 'medium'
  },
  estimatedCost: {
    type: Number,
    required: true,
    min: 0
  },
  status: {
    type: String,
    enum: ['pending', 'ordered', 'cancelled', 'completed'],
    default: 'pending'
  },
  orderReference: {
    type: String,
    sparse: true
  },
  expectedDeliveryDate: Date,
  notes: String,
  autoGenerated: {
    type: Boolean,
    default: false
  },
  acknowledged: {
    type: Boolean,
    default: false
  },
  acknowledgedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },
  acknowledgedAt: Date,
  createdBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  processedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },
  processedAt: Date
}, {
  timestamps: true
});

// Indexes
reorderAlertSchema.index({ inventoryItem: 1 });
reorderAlertSchema.index({ supplier: 1 });
reorderAlertSchema.index({ status: 1 });
reorderAlertSchema.index({ priority: 1 });
reorderAlertSchema.index({ createdAt: -1 });

// Compound index for active alerts
reorderAlertSchema.index({ status: 1, priority: 1, createdAt: -1 });

// Virtual for days since creation
reorderAlertSchema.virtual('daysOld').get(function() {
  return Math.floor((Date.now() - this.createdAt) / (1000 * 60 * 60 * 24));
});

// Virtual for urgency level
reorderAlertSchema.virtual('urgencyLevel').get(function() {
  const daysOld = this.daysOld;
  const stockRatio = this.currentStock / this.reorderPoint;
  
  if (this.currentStock === 0 || daysOld > 7) return 'critical';
  if (stockRatio < 0.5 || daysOld > 3) return 'high';
  if (stockRatio < 0.8 || daysOld > 1) return 'medium';
  return 'low';
});

// Pre-save middleware to set priority based on stock levels
reorderAlertSchema.pre('save', function(next) {
  if (this.isNew || this.isModified('currentStock') || this.isModified('reorderPoint')) {
    const stockRatio = this.currentStock / this.reorderPoint;
    
    if (this.currentStock === 0) {
      this.priority = 'high';
    } else if (stockRatio < 0.3) {
      this.priority = 'high';
    } else if (stockRatio < 0.7) {
      this.priority = 'medium';
    } else {
      this.priority = 'low';
    }
  }
  next();
});

reorderAlertSchema.set('toJSON', { virtuals: true });
reorderAlertSchema.set('toObject', { virtuals: true });

const ReorderAlert = mongoose.model('ReorderAlert', reorderAlertSchema);

export default ReorderAlert;